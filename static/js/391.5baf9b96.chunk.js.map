{"version":3,"file":"static/js/391.5baf9b96.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","redux/filter/selectors.js","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form_contact\":\"ContactForm_form_contact__jMOUN\",\"form_label\":\"ContactForm_form_label__KFrv0\",\"form_input\":\"ContactForm_form_input__juvV+\",\"form_button\":\"ContactForm_form_button__3kup0\"};","export const selectContacts = state => state.contacts.items;","import { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactForm.module.css';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport PropTypes from 'prop-types';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const validationSchema = Yup.object({\n    name: Yup.string()\n      .required('Name is required')\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'Name may contain only letters, apostrophe, dash and spaces.'\n      ),\n    phone: Yup.string()\n      .required('Phone number is required')\n      .matches(\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      ),\n  });\n\n  const handleSubmit = (values, { resetForm }) => {\n    const isDuplicateContact = contacts.find(\n      contact => contact.name.toLowerCase() === values.name.toLowerCase()\n    );\n\n    if (isDuplicateContact) {\n      alert('The contact already exists!');\n      resetForm();\n      return;\n    }\n\n    const id = nanoid();\n    dispatch(addContact({ id, ...values }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', phone: '' }}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form className={css.form_contact}>\n        <label className={css.form_label} htmlFor=\"example name\">\n          Name\n        </label>\n        <Field\n          className={css.form_input}\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          required\n        />\n        <ErrorMessage\n          name=\"name\"\n          component=\"div\"\n          className={css.error_message}\n        />\n\n        <label className={css.form_label} htmlFor=\"example number\">\n          Number\n        </label>\n        <Field\n          className={css.form_input}\n          type=\"tel\"\n          name=\"phone\"\n          id=\"phone\"\n          required\n        />\n        <ErrorMessage\n          name=\"phone\"\n          component=\"div\"\n          className={css.error_message}\n        />\n\n        <button className={css.form_button} type=\"submit\">\n          Add contact\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n\nContactForm.propTypes = {\n  contactsSelector: PropTypes.func,\n  addContact: PropTypes.func,\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { filterUser } from 'redux/filter/filterSlise';\n\nexport const Filter = () => {\n  const [filter, setFilter] = useState('');\n  const dispatch = useDispatch();\n  const changeFilter = ({ target }) => {\n    setFilter(target.value);\n    dispatch(filterUser(target.value));\n  };\n  return (\n    <label>\n      <span>Find contacts by name</span>\n      <input type=\"text\" name=\"filter\" value={filter} onChange={changeFilter} />\n    </label>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contact_List\":\"ContactList_contact_List__005Oa\",\"contact_item\":\"ContactList_contact_item__MaQF6\",\"contact_button\":\"ContactList_contact_button__vVisM\",\"contact__message\":\"ContactList_contact__message__DzSaZ\"};","export const selectFilter = state => state.filter;","import React from 'react';\nimport css from './ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { selectLoading } from 'redux/auth/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n  const contacts = useSelector(selectContacts);\n    console.log('first', contacts)\n  const contactsQuery = useSelector(selectFilter);\n  const filterContactsList = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(contactsQuery.toLowerCase())\n  );\n\n\n\n  return (\n    <ul className={css.contact_List}>\n      {filterContactsList.length ? (\n        filterContactsList.map(contact => (\n          <li className={css.contact_item} key={contact.id}>\n            {contact.name} - {contact.phone}\n            {!isLoading && (\n              <button\n                type=\"button\"\n                className={css.contact_button}\n                onClick={() => dispatch(deleteContact(contact.id))}\n              >\n                Delete\n              </button>\n            )}\n          </li>\n        ))\n      ) : (\n        <p className={css.contact__message}>No such contact with that name</p>\n      )}\n    </ul>\n  );\n};","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { ContactList } from \"components/ContactList/ContactList\";\n\n\nconst ContactsPage = () => {\n  // const isLoading = useSelector(selectLoading)\n  return (\n    <section style={{paddingTop: 40}}>\n      <container style={{padding:'0, 60'}}>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </container>\n    </section>\n  );\n};\n\nexport default ContactsPage;"],"names":["selectContacts","state","contacts","items","ContactForm","useSelector","dispatch","useDispatch","validationSchema","Yup","name","required","matches","phone","initialValues","onSubmit","values","resetForm","find","contact","toLowerCase","alert","id","nanoid","addContact","className","css","htmlFor","type","component","Filter","useState","filter","setFilter","value","onChange","target","filterUser","selectFilter","ContactList","isLoading","selectLoading","console","log","contactsQuery","filterContactsList","includes","length","map","onClick","deleteContact","style","paddingTop","padding"],"sourceRoot":""}